[file-run]
command:c,cpp,asm="$(VIM_PATHNOEXT)"
command:rust=cargo run
output=terminal
cwd=$(VIM_FILEDIR)

[file-test:gcc]
command:cpp=g++ -fmax-errors=20 -std=c++20 -Wall -gdwarf-4  "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lgtest -lgmock -lpthread               

[file-test:clang]
command:cpp=clang++ -fmax-errors=20 -std=c++20 -Wall -Wstrict-aliasing=1 -gdwarf-4  "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lgtest -lgmock -lpthread               


[file-build:gcc]
command:c=gcc -fmax-errors=20 -std=gnu11 -Wall -Wstrict-aliasing=1 -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" 
command:cpp=g++ -fmax-errors=20 -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:rust=cargo build
command:dot=dot -Tpng -o  $(VIM_PATHNOEXT).png $(VIM_FILEPATH) 
command:sh=sh "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
notify=echo
save=2

[file-build:clang]
command:c=clang -std=gnu11 -Wall -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" 
command:cpp=clang++  -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:rust=cargo build
command:dot=dot -Tpng -o  $(VIM_PATHNOEXT).png $(VIM_FILEPATH) 
command:sh=sh "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"

command:ruby=ruby "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
notify=echo
save=2

[asm-build:x32]
command:asm=as --32 -gdwarf-4 -o "$(VIM_PATHNOEXT).o" "$(VIM_FILEPATH)" && ld -m elf_i386 -dynamic-linker /lib/ld-linux.so -lc -o "$(VIM_PATHNOEXT)" -o "$(VIM_PATHNOEXT).o"
output=quickfix
cwd=$(VIM_FILEDIR)
notify=echo
save=2

[asm-build:x64]
command:asm=as --64 -gdwarf-4 -o "$(VIM_PATHNOEXT).o" "$(VIM_FILEPATH)" && ld -dynamic-linker /lib64/ld-linux-86-64.so.2 -lc -o "$(VIM_PATHNOEXT)" -o "$(VIM_PATHNOEXT).o"


[cxx_project-build]
command=cmake --build _builds
cwd=$(VIM_ROOT)
notify=echo
save=2

[project-run]
command=../$(VIM_PRONAME)/_builds/$(VIM_PRONAME)
cwd=$(VIM_ROOT)
output=terminal

[generate-compile-database-from-makefile]
command=make --always-make --dry-run | grep -wE 'gcc |g++' | grep -w '\-c' | jq -nR '[inputs|{directory:".", command:., file: match(" [^ ]+$").string[1:]}]' > compile_commands.json
notify=echo
cwd=$(VIM_ROOT)

[cxx_project-clean]
command/linux=rm -rf _builds
notify=echo
cwd=$(VIM_ROOT)

[cxx_project-configurate:debug]
command=cmake -DCMAKE_BUILD_TYPE=Debug -S. -B_builds
notify=echo
cwd=$(VIM_ROOT)
save=2

[cxx_project-configurate:release]
command=cmake -DCMAKE_BUILD_TYPE=Release -S. -B_builds
cwd=$(VIM_ROOT)
save=2

