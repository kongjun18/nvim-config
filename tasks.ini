[file-run]
command:c,cpp,asm="$(VIM_PATHNOEXT)"
command:rust=cargo run
command:lua=lua "$(VIM_FILENAME)"
output=terminal
cwd=$(VIM_FILEDIR)
save=2

;----------------------------------------

[file-build]
command:c=gcc -fmax-errors=20 -std=gnu11 -Wall -Wstrict-aliasing=1 -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:cpp=g++ -fmax-errors=20 -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:rust=cargo build
command:dot=dot -Tpng -o  $(VIM_PATHNOEXT).png $(VIM_FILEPATH)
command:sh=sh "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:asm=as --64 -gdwarf-4 -o "$(VIM_PATHNOEXT).o" "$(VIM_FILEPATH)" && ld -m elf_i386 -dynamic-linker /lib/ld-linux.so -lc -o "$(VIM_PATHNOEXT)" -o "$(VIM_PATHNOEXT).o"
; only parse lua source code
command:lua=luac -p "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
notify=echo
save=2

[file-build:gcc]
command:c=gcc -fmax-errors=20 -std=gnu11 -Wall -Wstrict-aliasing=1 -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:cpp=g++ -fmax-errors=20 -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"

[file-build:clang]
command:c=clang -std=gnu11 -Wall -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:cpp=clang++  -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"

;----------------------------------------

[file-test:gcc]
command:cpp=g++ -fmax-errors=20 -std=c++20 -Wall -gdwarf-4  "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lgtest -lgmock -lpthread

[file-test:clang]
command:cpp=clang++ -fmax-errors=20 -std=c++20 -Wall -Wstrict-aliasing=1 -gdwarf-4  "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lgtest -lgmock -lpthread

;----------------------------------------

[asm-build:x32]
output=quickfix
cwd=$(VIM_FILEDIR)
notify=echo
save=2

[asm-build]
command:asm=as --64 -gdwarf-4 -o "$(VIM_PATHNOEXT).o" "$(VIM_FILEPATH)" && ld -dynamic-linker /lib64/ld-linux-86-64.so.2 -lc -o "$(VIM_PATHNOEXT)" -o "$(VIM_PATHNOEXT).o"
output=quickfix
cwd=$(VIM_FILEDIR)
notify=echo
save=2

;----------------------------------------

[project-build]
command = cmake --build _builds -- VERBOSE=1
cwd=$(VIM_ROOT)
notify=echo
save=2

[project-build:cmake]
command = cmake --build _builds/
cwd=$(VIM_ROOT)
notify=echo
save=2

[project-build:cargo]
command=cargo build
output=quickfix
cwd=$(VIM_FILEDIR)
notify=echo
save=2

[project-build:make]
command/linux=make
command/win32=mingw32-make
cwd=$(VIM_ROOT)
notify=echo
save=2

; ---------------------------------------
[project-run]
command/linux=_builds/$(VIM_PRONAME)
command/win32=_builds\$(VIM_PRONAME).exe
cwd=$(VIM_ROOT)
output=terminal


[project-run:cargo]
command=cargo run
cwd=$(VIM_ROOT)
output=terminal

; --------------------------------------
[generate-compile-database-from-makefile]
; command=make --always-make --dry-run | grep -wE 'gcc |g++' | grep -w '\-c' | jq -nR '[inputs|{directory:".", command:., file: match(" [^ ]+$").string[1:]}]' > compile_commands.json
command/linux=bear make
command/win32=bear mingw32-make
notify=echo
cwd=$(VIM_ROOT)

; --------------------------------------
[project-clean]
command/linux=rm -rf _builds
command/win32=rd/s/q _builds
notify=echo
cwd=$(VIM_ROOT)

[project-clean:cmake]
command/linux=rm -rf _builds
command/win32=rd/s/q _builds
notify=echo
cwd=$(VIM_ROOT)

[project-clean:make]
command/linux=make clean distclean
command/win32=mingw32-make clean distclean
notify=echo
cwd=$(VIM_ROOT)

; -------------------------------------
[project-configure]
command/linux=cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug -S. -B_builds && ln -sf _builds/compile_commands.json .
command/win32=cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=mingw32-make -G "Unix Makefiles" -S. -B_builds && copy _builds\compile_commands.json .
cwd=$(VIM_ROOT)
notify=echo
save=2

[project-configure:debug]
command/linux=cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug -S. -B_builds && ln -sf _builds/compile_commands.json .
command/win32=cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=mingw32-make -G "Unix Makefiles" -S. -B_builds && copy _builds\compile_commands.json .
cwd=$(VIM_ROOT)
notify=echo
save=2

[project-configure:release]
command/linux=cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Release -S. -B_builds && ln -sf _builds/compile_commands.json .
command/win32=cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" -S. -B_builds && copy _builds\compile_commands.json .
cwd=$(VIM_ROOT)
notify=echo
save=2

; ------------------------------------
[open-doc]
command=cmake --build _builds --target open-doc
cwd=$(VIM_ROOT)
[open-doc:cmake]
command=cmake --build _builds --target open-doc
cwd=$(VIM_ROOT)

[project-test:cargo]
command=cargo test
cwd=(VIM_ROOT)
notify=echo
save=2

; ----------------------------------- 
[cloc]
command=cloc --exclude-dir=_builds,.cache .
cwd=(VIM_ROOT)
notify=echo

; ----------------------------------
[clazy]
command/linux=find . -type d -name '.cache' -prune -o -type d -name '_builds' -prune -o -name '*.cpp' -print | xargs clazy-standalone -checks=level2 -p default/compile_commands.json
cwd=(VIM_ROOT)
notify=echo

[clang-tidy]
command/linux=find . -type d -name '.cache' -prune -o -type d -name '_builds' -prune -o -name '*.cpp' -print | xargs clang-tidy -checks=level2 -p default/compile_commands.json
cwd=(VIM_ROOT)
notify=echo
