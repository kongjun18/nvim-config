
priority -50

###########################################################################
#                            SnipMate Snippets                            #
###########################################################################
snippet gvar "Global / configuration variable" b
if !exists("g:${1:var}")
	let g:$1 = ${2:"${3:default}"}
endif
endsnippet

snippet map "Add map"
if !hasmapto(${1:map_name})
	map <unique> ${2:map_sequence} 
endif$3
endsnippet

snippet command "Add user-defined command"
if !exists(${1:command_name})
	command $2
endif$3
endsnippet

snippet guard "script reload guard" b
if exists('${1:loaded_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1$3
endsnippet

snippet fn "function" b
function ${1:function_name}($2)
	${3:" code}
endfunction
endsnippet

snippet head "header for vimscript" b
" Vim ${1:global} plugin for ${2:something}
" Last Change: `!v strftime("%Y-%m-%d")`
" Author: Kong Jun <kongjun18@outlook.com>
" Github: https://github.com/kongjun18
" License: GPL-3.0
$3
endsnippet

snippet linefeed "avoid line-continuation problem" b
let s:save_cpo = &cpo
set cpo&vim
${VISUAL}$1
let &cpo = s:save_cpo
unlet s:save_cpo
$2
endsnippet
# vim:ft=snippets:
