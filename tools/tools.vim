" Some tools for Vim
" Last Change: 2020-11-05 
" Author: Kong Jun <kongjun18@outlook.com>
" Github: https://github.com/kongjun18
" License: GPL-3.0

" guard {{{
if exists('loaded_tools_vim') || &cp || version < 700
    finish
endif
let loaded_tools_vim = 1
" }}}

" tools#create_gitignore {{{
" @brief: Create .gitignore file for C/C++ 
" @note:     only impletemt c and cpp
function g:tools#create_gitignore(filetype)
    if filereadable('.gitignore')
        echomsg "This project had .gitignore"
        return 
    endif

    let l:gitignore_content = []
    if a:filetype == 'c' && a:filetype == 'cpp'
        call add(l:gitignore_content, "# CMake-generated file")
        call add(l:gitignore_content, "_builds")
        call add(l:gitignore_content, "compile_commands.json")
        call add(l:gitignore_content, "\n")

        call add(l:gitignore_content, "# fd dotfile")
        call add(l:gitignore_content, ".fdignore")
        call add(l:gitignore_content, "\n")

        call add(l:gitignore_content, "# rg dotfile")
        call add(l:gitignore_content, ".fdignore")
        call add(l:gitignore_content, "\n")

        call add(l:gitignore_content, "# Vim-generated file")
        call add(l:gitignore_content, ".root")
        call add(l:gitignore_content, ".project")
        call add(l:gitignore_content, ".swp")
        call add(l:gitignore_content, ".session")
        call add(l:gitignore_content, "session")
        call add(l:gitignore_content, "swp")
        call add(l:gitignore_content, ".undo")
        call add(l:gitignore_content, "undo")
        call add(l:gitignore_content, "projectins.json")
        call add(l:gitignore_content, ".ycm_extra_config.py")
        call add(l:gitignore_content, '.notags')
        call add(l:gitignore_content, "\n")
        
        call add(l:gitignore_content, "# object file")
        call add(l:gitignore_content, "*.o")
        call add(l:gitignore_content, "*.tmp") 
        call add(l:gitignore_content, "*.bin")
        call add(l:gitignore_content, "\n")

        call writefile(l:gitignore_content, '.gitignore')
    endif
endfunction
" }}}

" tools#rm_gtags() {{{

" Delete gtags generated by gutentags of a:project_dir
"
" @depends asyncrun and gutentags
" 
" If gtags encounters errors, call this function to delete gtags generated by
" gutentags and run :GutentagsUpdate
"
" For example, :call tools#rm_tags(asyncun#get_root('%'))
function g:tools#rm_gtags(project_dir)
    let l:gtags_dir = a:project_dir
    if l:gtags_dir[0] != '~' && l:gtags_dir[0] != '/'
        echoerr "tools#rm_tags: argument error"
    endif
    if l:gtags_dir[0] == '~'
        let l:gtags_dir = substitute(l:gtags_dir, '~', "$HOME")
    endif
    let l:gtags_dir = substitute(l:gtags_dir, '\/', '-', 'g')
    let l:gtags_dir = substitute(l:gtags_dir, '^-', '\/', '')
    let l:gtags_dir = trim(l:gtags_dir)
    let l:gtags_dir = printf("%s%s", g:gutentags_cache_dir, l:gtags_dir)
    if delete(l:gtags_dir, 'rf') != 0
        echoerr "Can't delete tag directory " . l:gtags_dir
    endif
endfunction
" }}}

" tools#ensure_dir() {{{

"}}}

" Integrate lightline and ale {{{
function! g:LightlineLinterWarnings() abort
let l:counts = ale#statusline#Count(bufnr(''))
let l:all_errors = l:counts.error + l:counts.style_error
let l:all_non_errors = l:counts.total - l:all_errors
return l:counts.total == 0 ? '' : printf('%d ▲', all_non_errors)
endfunction

function! g:LightlineLinterErrors() abort
let l:counts = ale#statusline#Count(bufnr(''))
let l:all_errors = l:counts.error + l:counts.style_error
let l:all_non_errors = l:counts.total - l:all_errors
return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! g:LightlineLinterOK() abort
let l:counts = ale#statusline#Count(bufnr(''))
let l:all_errors = l:counts.error + l:counts.style_error
let l:all_non_errors = l:counts.total - l:all_errors
return l:counts.total == 0 ? '✓' : ''
endfunction
" }}}
