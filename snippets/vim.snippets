snippet header standard Vim script file header
	" ${1}
	" Last Change: `strftime('%Y-%m-%d')`
	" Author: ${2:`g:snips_author`}
	" Github: ${3:`g:snips_github`}
	" License: ${4:GPL-2.0}
	${5}
snippet guard script reload guard
	if exists('${1:load_`vim_snippets#Filename()`}') || &cp${2: || version < 800}
		finish
	endif
	let $1 = 1${0}
snippet fun function
	function! ${1:`expand('%') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\zs.*\ze.vim'),'[/\\]','#','g').'#' : ''`}${2:function_name}(${3})
		${0}
	endfunction
snippet t try ... catch statement
	try
		${1:${VISUAL}}
	catch ${2}
		${0}
	endtry
snippet for for ... in loop
	for ${1} in ${2}
		${0:${VISUAL}}
	endfor
snippet forkv for [key, value] in loop
	for [${1},${2}] in items(${3})
		${0}
		unlet $1 $2
	endfor
snippet au augroup ... autocmd block
	augroup ${1:AU_NAME}
		autocmd!
		autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}
	augroup END
snippet auv augroupvisual ... autocmd block with visual placeholder
	augroup ${1:AU_NAME}
		autocmd!
		${0:${VISUAL}}
	augroup END
snippet bun Vundle.vim Plugin definition
	Plugin '${0}'
snippet plug vim-plug Plugin definition
	Plug '${0}'
snippet plugdo vim-plug Plugin definition with { 'do': '' }
	Plug '${1}', { 'do': '${0}' }
snippet plugon vim-plug Plugin definition with { 'on': '' }
	Plug '${1}', { 'on': '${0}' }
snippet plugfor vim-plug Plugin definition with { 'for': '' }
	Plug '${1}', { 'for': '${0}' }
snippet plugbr vim-plug Plugin definition with { 'branch': '' }
	Plug '${1}', { 'branch': '${0}' }
snippet plugtag vim-plug Plugin definition with { 'tag': '' }
	Plug '${1}', { 'tag': '${0}' }
snippet let
	let ${1:variable} = ${0: value}
snippet se
	set ${1:setting};
snippet set
	set ${1:setting} = ${0:value}
snippet nn
	nnoremap ${1} ${2}<CR>
snippet no
	noremap ${1} ${2}
snippet vm
	vmap ${1} ${2}
snippet im
	imap ${1} ${2}
snippet exe
	execute ${1}
snippet filename
	`Filename()`
